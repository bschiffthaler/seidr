// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/SeidRFile.h"
#include <Rcpp.h>

using namespace Rcpp;

// SeidrFile__ptr
XPtr<SeidrFile> SeidrFile__ptr(std::string p);
RcppExport SEXP _SeidRFile_SeidrFile__ptr(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFile__ptr(p));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr
XPtr<SeidrFileHeader> SeidrFileHeader__ptr(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getAttr
List SeidrFileHeader__ptr__getAttr(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getAttr(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getAttr(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__Position
SEXP SeidrFileHeader__ptr__Position(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__Position(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__Position(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getNodes
CharacterVector SeidrFileHeader__ptr__getNodes(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getNodes(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getNodes(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getAlgs
CharacterVector SeidrFileHeader__ptr__getAlgs(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getAlgs(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getAlgs(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getSTags
CharacterVector SeidrFileHeader__ptr__getSTags(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getSTags(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getSTags(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getPageRank
NumericVector SeidrFileHeader__ptr__getPageRank(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getPageRank(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getPageRank(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getCloseness
NumericVector SeidrFileHeader__ptr__getCloseness(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getCloseness(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getCloseness(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getBetweenness
NumericVector SeidrFileHeader__ptr__getBetweenness(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getBetweenness(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getBetweenness(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getStrength
NumericVector SeidrFileHeader__ptr__getStrength(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getStrength(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getStrength(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getEigenvector
NumericVector SeidrFileHeader__ptr__getEigenvector(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getEigenvector(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getEigenvector(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFileHeader__ptr__getKatz
NumericVector SeidrFileHeader__ptr__getKatz(SEXP xp);
RcppExport SEXP _SeidRFile_SeidrFileHeader__ptr__getKatz(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFileHeader__ptr__getKatz(xp));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFile__ptr__vectorizeSF
SEXP SeidrFile__ptr__vectorizeSF(SEXP xpf, SEXP xph, bool scores, bool ranks, bool flags, bool supp_str, bool supp_int, bool supp_flt, bool indices, uint64_t chunksize);
RcppExport SEXP _SeidRFile_SeidrFile__ptr__vectorizeSF(SEXP xpfSEXP, SEXP xphSEXP, SEXP scoresSEXP, SEXP ranksSEXP, SEXP flagsSEXP, SEXP supp_strSEXP, SEXP supp_intSEXP, SEXP supp_fltSEXP, SEXP indicesSEXP, SEXP chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpf(xpfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xph(xphSEXP);
    Rcpp::traits::input_parameter< bool >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< bool >::type ranks(ranksSEXP);
    Rcpp::traits::input_parameter< bool >::type flags(flagsSEXP);
    Rcpp::traits::input_parameter< bool >::type supp_str(supp_strSEXP);
    Rcpp::traits::input_parameter< bool >::type supp_int(supp_intSEXP);
    Rcpp::traits::input_parameter< bool >::type supp_flt(supp_fltSEXP);
    Rcpp::traits::input_parameter< bool >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type chunksize(chunksizeSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFile__ptr__vectorizeSF(xpf, xph, scores, ranks, flags, supp_str, supp_int, supp_flt, indices, chunksize));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFile__ptr__vectorizeSingle
SEXP SeidrFile__ptr__vectorizeSingle(SEXP xpf, SEXP xph, bool score, bool rank, bool indices, uint32_t index, uint64_t chunksize);
RcppExport SEXP _SeidRFile_SeidrFile__ptr__vectorizeSingle(SEXP xpfSEXP, SEXP xphSEXP, SEXP scoreSEXP, SEXP rankSEXP, SEXP indicesSEXP, SEXP indexSEXP, SEXP chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpf(xpfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xph(xphSEXP);
    Rcpp::traits::input_parameter< bool >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< bool >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< bool >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type index(indexSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type chunksize(chunksizeSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFile__ptr__vectorizeSingle(xpf, xph, score, rank, indices, index, chunksize));
    return rcpp_result_gen;
END_RCPP
}
// SeidrFile__ptr__close
void SeidrFile__ptr__close(SEXP xpf);
RcppExport SEXP _SeidRFile_SeidrFile__ptr__close(SEXP xpfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpf(xpfSEXP);
    SeidrFile__ptr__close(xpf);
    return R_NilValue;
END_RCPP
}
// SeidrFile__ptr__isopen
SEXP SeidrFile__ptr__isopen(SEXP xpf);
RcppExport SEXP _SeidRFile_SeidrFile__ptr__isopen(SEXP xpfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpf(xpfSEXP);
    rcpp_result_gen = Rcpp::wrap(SeidrFile__ptr__isopen(xpf));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SeidRFile_SeidrFile__ptr", (DL_FUNC) &_SeidRFile_SeidrFile__ptr, 1},
    {"_SeidRFile_SeidrFileHeader__ptr", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getAttr", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getAttr, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__Position", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__Position, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getNodes", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getNodes, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getAlgs", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getAlgs, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getSTags", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getSTags, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getPageRank", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getPageRank, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getCloseness", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getCloseness, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getBetweenness", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getBetweenness, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getStrength", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getStrength, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getEigenvector", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getEigenvector, 1},
    {"_SeidRFile_SeidrFileHeader__ptr__getKatz", (DL_FUNC) &_SeidRFile_SeidrFileHeader__ptr__getKatz, 1},
    {"_SeidRFile_SeidrFile__ptr__vectorizeSF", (DL_FUNC) &_SeidRFile_SeidrFile__ptr__vectorizeSF, 10},
    {"_SeidRFile_SeidrFile__ptr__vectorizeSingle", (DL_FUNC) &_SeidRFile_SeidrFile__ptr__vectorizeSingle, 7},
    {"_SeidRFile_SeidrFile__ptr__close", (DL_FUNC) &_SeidRFile_SeidrFile__ptr__close, 1},
    {"_SeidRFile_SeidrFile__ptr__isopen", (DL_FUNC) &_SeidRFile_SeidrFile__ptr__isopen, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SeidRFile(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
